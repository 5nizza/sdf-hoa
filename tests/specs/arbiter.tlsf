INFO
{
  TITLE:       ""
  DESCRIPTION: "
                This is a new version of full_arbiter:
                it is modularized (that is a syntactic difference)
                but more importantly it uses W where previous spec
                used R (the prev spec was for Moore semantics actually!).
               "
  SEMANTICS:   Mealy
  TARGET:      Mealy
}

GLOBAL
{
  PARAMETERS {
  	n = 2; // nâ‰¥1
  }

  DEFINITIONS
  {
    // copied from simple arbiter
    mutual_exclusion(bus) = mone(bus,0,(SIZEOF bus) - 1);
    none(bus,i,j) = &&[i <= t <= j] !bus[t];
    mone(bus,i,j) =
    i > j : false
    i == j : true
    i < j :
      (none(bus, i, m(i,j)) && mone(bus, m(i,j) + 1, j)) ||
      (mone(bus, i, m(i,j)) && none(bus, m(i,j) + 1, j));
    m(i,j) = (i + j) / 2;

    //

    lower_grant_eventually(r,g) =
      G(g && (G !r) -> F !g);

    no_spurious_grants(r,g) =
    (
      (!g W r) &&                         // initially
      G(g && X(!r && !g) -> X(!g W r))    // always
    );

    every_req_is_granted(r,g) = G(r -> F g);
  }
}

MAIN
{
  INPUTS  { r[n]; }
  OUTPUTS { g[n]; }

  GUARANTEES
  {
    G mutual_exclusion(g);

    &&[0 <= i < n]
    (
      no_spurious_grants(r[i], g[i]) &&
      lower_grant_eventually(r[i], g[i]) &&
      every_req_is_granted(r[i], g[i])
    );
  }
}
